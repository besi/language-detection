<?php


use Unicate\LanguageDetection\LanguageDetection;
use PHPUnit\Framework\TestCase;

class LanguageDetectionTest extends TestCase {

    private $langDetection;

    public function mockSetup1() {
        // Mock Server Data
        $_SERVER['REQUEST_URI'] = '/shop/es/en/article/34234';
        $_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'de-CH,en;q=0.8,en-US;q=0.5,fr;q=0.3';
        $_GET['lang'] = 'fr';
        $_COOKIE['lang'] = 'it';

        // Set Defaults & create object
        $defaultLang = 'en';
        $availableLang = ['en', 'de', 'fr', 'it', 'es'];
        $this->langDetection = new LanguageDetection($availableLang);
    }

    public function mockSetup2() {
        // Mock Server Data
        $_SERVER['REQUEST_URI'] = '/cn/us/pl/';
        $_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'xx,en;q=0.8,en-US;q=0.5,fr;q=0.3';
        $_GET['lang'] = 'xx';
        $_COOKIE['lang'] = 'cn';

        // Set Defaults & create object
        $defaultLang = 'en';
        $availableLang = ['en', 'de', 'fr', 'it', 'es'];
        $this->langDetection = new LanguageDetection($availableLang);
    }


    public function setUp() {
       $this->mockSetup1();
    }

    public function tearDown() {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testGetLang() {
        // Gets default Language
        $this->assertEquals('en', $this->langDetection->getLang());
    }

    public function testByHeader() {
        $lang = $this->langDetection->byHeader()->getLang();
        $this->assertEquals('de', $lang);
    }

    public function testByParam() {
        $lang = $this->langDetection->byParam()->getLang();
        $this->assertEquals('fr', $lang);
    }

    public function testByCookie() {
        $lang = $this->langDetection->byCookie()->getLang();
        $this->assertEquals('it', $lang);
    }

    public function testByUri() {
        $lang = $this->langDetection->byUri()->getLang();
        $this->assertEquals('es', $lang);
    }

    public function testChain_1() {
        $lang = $this->langDetection->byCookie()->byHeader()->byParam()->byUri()->getLang();
        $this->assertEquals('es', $lang);
    }

    public function testChain_2() {
        $lang = $this->langDetection->byHeader()->byParam()->byUri()->byCookie()->getLang();
        $this->assertEquals('it', $lang);
    }

    public function testChain_3() {
        $lang = $this->langDetection->byHeader()->byUri()->byCookie()->byParam()->getLang();
        $this->assertEquals('fr', $lang);
    }

    public function testChain_4() {
        $lang = $this->langDetection->byUri()->byCookie()->byParam()->byHeader()->getLang();
        $this->assertEquals('de', $lang);
    }

    public function testDefault() {
        $this->mockSetup2();
        $lang1 = $this->langDetection->byUri()->getLang();
        $lang2 = $this->langDetection->byParam()->getLang();
        $lang3 = $this->langDetection->byCookie()->getLang();
        $lang4 = $this->langDetection->byHeader()->getLang();
        $this->assertEquals('en', $lang1);
        $this->assertEquals('en', $lang2);
        $this->assertEquals('en', $lang3);
        $this->assertEquals('en', $lang4);
    }

}
